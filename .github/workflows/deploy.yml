name: CI/CD to GCP

on:
  push:
    branches:
      - main  # mainブランチへのPushをトリガーとする

# 環境変数 (GitHub Secretsで設定した値を参照)
env:
  # GCP/Cloud Runの設定
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ID: accounting-api
  AR_REPO: tutorial-myapp # Artifact Registryリポジトリ名
  IMAGE: accounting-app
  # Cloud SQL接続名
  SQL_CONN: ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.GCP_REGION }}:tutorial-myapp-database-setting

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Workload Identity連携に必要な権限
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # 1. コードのチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. GCP認証 (Workload Identity連携)
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # 3. Docker認証 (Artifact Registryへのプッシュ準備)
      - name: Set up Docker access to AR
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      # 4. バックエンド: ビルドとプッシュ
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
          docker build --platform linux/amd64 -t $IMAGE_TAG .
          docker push $IMAGE_TAG
        
      # 5. バックエンド: Cloud Runデプロイ（Secret ManagerからDBパスワードを注入）
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_ID }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE }}:${{ github.sha }}
          flags: |
            --set-secrets DB_PASS=DB_PASSWORD:latest
            --add-cloudsql-instances ${{ env.SQL_CONN }}
            --set-env-vars DB_USER=${{ env.DB_USER }},DB_NAME=${{ env.DB_NAME }}

      # 6. フロントエンド: Node.js環境セットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm' 

      - name: Install Dependencies
        run: npm install


      # 7. フロントエンド: ビルドとFirebaseデプロイ
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          projectId: ${{ env.PROJECT_ID }}
          # 💡 firebaseServiceAccount は必須なので、Secretsで渡す
          firebaseServiceAccount: ${{ secrets.GCP_SERVICE_ACCOUNT }} 
        
        env: # ⬅️ env ブロックを追加
          # 💡 WIF認証で取得したトークンをFIREBASE_TOKENとして渡す
          #    （これがFirebase CLIに最優先で使われるべき認証情報となる）
          FIREBASE_TOKEN: ${{ steps.auth.outputs.access_token }} 
        

  